{"version":3,"sources":["Component/QuestionCard.tsx","serivces/quiz_services.ts","firebase.ts","App.tsx","reportWebVitals.ts","index.tsx","serviceWorker.js"],"names":["QuestionCard","question","option","callback","totalQuestion","steps","correctAnswer","useState","selectedAnswer","setSelectedAnswer","showResult","setShowResult","handleSelection","e","target","value","console","log","className","onSubmit","map","opt","ind","type","name","required","checked","onChange","onClick","alert","getQuizDetails","level","a","fetch","res","json","results","quiz","questionObj","index","answer","correct_answer","array","incorrect_answers","concat","sort","Math","random","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","messaging","App","Notification","requestPermission","then","permission","getToken","currentToken","catch","err","setQuiz","currentStep","setCurrentStep","score","setScore","showComponent","setShowComponent","getCorrectAnswer","useEffect","questions","fetchData","length","startQuiz","userAns","preventDefault","currentQuestion","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","register","process","result","error"],"mappings":"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","file":"static/js/main.59d67d26.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { QuestionPropType } from '../Types/quiz_types';\r\n\r\nexport const QuestionCard: React.FC<QuestionPropType> = ({ question, option, callback, totalQuestion, steps, correctAnswer }) => {\r\n\r\n    let [selectedAnswer, setSelectedAnswer] = useState(\"\");\r\n    /* let [corAnswer, setCorAnswer] = useState(\"\"); */\r\n    /* let [showQuestion, setShowQuestion] = useState(true); */\r\n\r\n    /* let [showResult, setShowResult] = useState(false); */\r\n    let [showResult, setShowResult] = useState(false);\r\n\r\n    const handleSelection = (e: any) => {\r\n        setSelectedAnswer(e.target.value)\r\n        setShowResult(true);\r\n        console.log(showResult);\r\n        /* setShowQuestion(false); */\r\n    }\r\n\r\n    \r\n    \r\n    return (\r\n        <div>\r\n            \r\n            <div className=\"question-container\">\r\n                <h1>Question Card</h1>\r\n                <span>{steps} / {totalQuestion}</span>\r\n                <div className=\"question\">\r\n                    {question}\r\n                </div>\r\n                <form onSubmit={(e: React.FormEvent<EventTarget>) =>\r\n                    callback(e, selectedAnswer)\r\n                    \r\n                }>\r\n\r\n                    {\r\n                        option.map((opt: string, ind: number) => {\r\n                            return (\r\n                                <div key={ind}>\r\n\r\n                                    <label >\r\n                                        <input\r\n                                            type=\"radio\"\r\n                                            name=\"opt\"\r\n                                            required\r\n                                            value={opt}\r\n                                            checked={selectedAnswer === opt}\r\n                                            onChange={handleSelection}\r\n                                        />\r\n                                        {opt}\r\n                                    </label>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                    <input type=\"submit\" onClick={()=>alert(`correct answer: ${correctAnswer}`)} />\r\n                        \r\n                </form>\r\n            </div>\r\n\r\n                            \r\n            </div >\r\n        \r\n    )\r\n}\r\n","\r\nimport { Quiz, QuestionType} from '../Types/quiz_types';\r\n\r\n/* shuffle results  copy paste this function   */\r\nconst shuffleArray = (array: any[]) => \r\n    [...array].sort( () => Math.random() - 0.5)\r\n\r\n\r\n/* Promise<Quiz[]> --> it will promise and array of quiz */\r\nexport const getQuizDetails = async (totalQuestion: number, level: string): Promise<QuestionType[]> => {\r\n    const res = await fetch(`https://opentdb.com/api.php?amount=${totalQuestion}&difficulty=${level}&type=multiple`)\r\n    let { results } = await res.json()\r\n    const quiz: QuestionType[] = results.map((questionObj: Quiz, index: number) => {\r\n        return {\r\n            question: questionObj.question,\r\n            answer: questionObj.correct_answer,\r\n            correct_answer: questionObj.correct_answer,\r\n            option: shuffleArray(questionObj.incorrect_answers.concat(questionObj.correct_answer))\r\n        }\r\n    })\r\n    return quiz\r\n}","import firebase from 'firebase';\r\n\r\nconst Config = {\r\n    apiKey: \"AIzaSyDiFrUHb1XX92VuCEEVuVvQP9HHBPtC2fA\",\r\n    authDomain: \"quiz-app-pwa1.firebaseapp.com\",\r\n    projectId: \"quiz-app-pwa1\",\r\n    storageBucket: \"quiz-app-pwa1.appspot.com\",\r\n    messagingSenderId: \"404446058020\",\r\n    appId: \"1:404446058020:web:cf46964b564a49e3d62ab1\"\r\n};\r\n\r\n\r\nfirebase.initializeApp(Config);\r\nconst messaging = firebase.messaging();\r\n\r\nexport function initNotification() {\r\n    Notification.requestPermission().then((permission) => {\r\n        console.log(permission)\r\n        if (permission === \"granted\") {\r\n            // Get registration token. Initially this makes a network call, once retrieved\r\n            // subsequent calls to getToken will return from cache.\r\n            messaging.getToken().then((currentToken) => {\r\n                if (currentToken) {\r\n                    // Send the token to your server and update the UI if necessary\r\n                    console.log(currentToken)\r\n                } else {\r\n                    // Show permission request UI\r\n                    console.log('No registration token available. Request permission to generate one.');\r\n                    // ...\r\n                }\r\n            }).catch((err) => {\r\n                console.log('An error occurred while retrieving token. ', err);\r\n                // ...\r\n            });\r\n\r\n        }\r\n    })\r\n}","import React, { useEffect, useState } from 'react';\nimport { QuestionCard } from './Component/QuestionCard';\nimport { getQuizDetails } from './serivces/quiz_services';\nimport { QuestionType } from './Types/quiz_types';\nimport './App.css';\n/* import { QueryByText } from '@testing-library/react'; */\n\nimport {initNotification} from './firebase';\n\n\nfunction App() {\n  initNotification()\n\n  \n  let [quiz, setQuiz] = useState<QuestionType[]>([])\n\n  let [currentStep, setCurrentStep] = useState(0)\n\n  let [score, setScore] = useState(0);\n  let [showResult, setShowResult] = useState(false);\n  let [showComponent, setShowComponent] = useState(false);\n\n  /* const currentQuestion: QuestionType = quiz[currentStep]; */\n  let [getCorrectAnswer] = useState<any>(\"\")\n  /* let answers:string[] = [] */\n  \n\n  useEffect(() => {\n    async function fetchData() {\n      const questions: QuestionType[] = await getQuizDetails(5, 'easy');\n      console.log(questions);\n      setQuiz(questions);\n      \n    }\n    fetchData();\n  }, []);\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userAns: string) => {\n    e.preventDefault()\n\n    /*  data of one question */\n    const currentQuestion: QuestionType = quiz[currentStep];\n    console.log(`correct answer:${currentQuestion.correct_answer}: user selection:${userAns}`)\n    \n\n\n    if (userAns === currentQuestion.correct_answer) {\n      setScore(++score)\n      \n    }\n\n/*     if (userAns !== currentQuestion.correct_answer) {\n     \n      alert(\" Not correct\")\n    } */\n\n    if (currentStep !== quiz.length - 1) {\n      setCurrentStep(++currentStep)\n\n    }\n    else {\n      setShowResult(true);\n      setShowComponent(false);\n    }\n    \n\n  }\n\n  if (!quiz.length) {\n    return <h3>Loading....</h3>\n  }\n\n\n  const startQuiz = () => {\n    setShowComponent(true);\n    setCurrentStep(0);\n    setScore(0);\n    setShowResult(false);\n  }\n\n  \n\n  return (\n    <div className=\"App\">\n      \n      <button onClick={startQuiz} > Start Quiz</button>\n      <div><h1>Quiz App</h1>\n\n        {showComponent ?\n          <QuestionCard\n            option={quiz[currentStep].option}\n            question={quiz[currentStep].question}\n            callback={handleSubmit}\n            totalQuestion={quiz.length}\n            steps={currentStep}\n            correctAnswer = {quiz[currentStep].correct_answer}\n          /> : null}\n      </div>\n\n      <div>\n        {showResult ? (<div className=\"question-container result\">\n          <h2>Result</h2>\n          <p>Your final score:{score} out of : {quiz.length}</p>\n          <p>{getCorrectAnswer}</p>\n          <button onClick={startQuiz}>Try again</button>\n        </div>) : null}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n/* import './index.css'; */\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.register();\n\nreportWebVitals();\n","export function register() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    // console.log(`${process.env.PUBLIC_URL}/CustomSW.js`)\r\n    navigator.serviceWorker\r\n      .register(`${process.env.PUBLIC_URL}/service-worker.js`)\r\n      .then(function (result) {\r\n        console.log(\"Registration successful, scope is:\", result);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(\"Service worker registration failed, error:\", error);\r\n      });\r\n  }\r\n}"],"sourceRoot":""}